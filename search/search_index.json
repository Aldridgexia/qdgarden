{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to QD Garden","text":"<p>Knowledge base for a quant developer.</p>"},{"location":"resources/","title":"Resources","text":"<p>Below are a list of resources that I frequently reference to.</p>"},{"location":"resources/#algorithm","title":"Algorithm","text":"<ul> <li>\u4ee3\u7801\u968f\u60f3\u5f55: in Chinese, free</li> <li>labuladong \u7684\u7b97\u6cd5\u7b14\u8bb0: in Chinese, some contents are members only</li> <li>NeetCode: IYKYK</li> </ul>"},{"location":"resources/#system-design","title":"System Design","text":"<ul> <li>System Design Interview \u2013 An insider's guide: bible for system design interview prep</li> <li>Designing Data-Intensive Applications: DDIA, IYKYK</li> </ul>"},{"location":"resources/#quant-interview","title":"Quant Interview","text":"<ul> <li>A Practical Guide To Quantitative Finance Interviews: must read for quant interview questions</li> <li>Mathematics and statistics for financial risk Management: great resource for practice questions (with solutions)</li> </ul>"},{"location":"resources/#misc","title":"Misc","text":"<ul> <li>Iris Series: Visualize Math -- From Arithmetic Basics to Machine Learning: in Chinese, 7 books covering math foundation to ML applications.</li> </ul>"},{"location":"resources/#quant-books","title":"Quant Books","text":"<ul> <li>Active Portfolio Management: A Quantitative Approach for Producing Superior Returns and Controlling Risk</li> <li>Quantitative Equity Portfolio Management, Second Edition: An Active Approach to Portfolio Construction and Management</li> <li>Quantitative Equity Portfolio Management: Modern Techniques and Applications</li> </ul>"},{"location":"cs/database/","title":"Database","text":"<p>Q1: What is ACID?</p> A1 <p>atomicity, consistency, isolation, durability.</p> <p>Q2: What is CAP theorem?</p> A2 <p>For consistency, availability and partition tolerance, only 2 out of 3 can be satisfied at the same time.</p> <p>CP sacrifices availability, AP sacrifices consistency, and CA is not possible in real life because network error is inevitable.</p> <p>Q3: What is consistency model?</p> A3 <p>Consistency model states that there are 3 types of consistency:</p> <ul> <li>strong consistency: all reads see same up to date data</li> <li>weak consistency: some reads might see stale data</li> <li>eventual consistency: a specific form of weak consistency, within certain time, all reads eventually will see same up to date data</li> </ul> <p>Q4: what is optimistic lock and pessimistic lock?</p> A4 <p>Optimistic lock does not acquire locks on data resources until the transaction is ready to commit. Pessimistic lock acquires locks as soon as data resources are accessed.</p> <p>Q5: what is database index?</p> A5 <p>A data structure that provides quick lookup of one or multiple columns in a table. There are two types of index:</p> <ul> <li>unique vs non-unique index: whether identical key values are allowed</li> <li>clustered vs non-clustered index: wheter order of index is the same as order of rows<ul> <li>one table can only have one clustered index but could have multiple non-clustered index</li> <li>query with non-clusterd index is slower than clustered index</li> <li>non-clustered index is a separate entity referencing original table</li> </ul> </li> </ul>"},{"location":"cs/database/#reference","title":"reference","text":"<ul> <li>Top 50 DBMS Interview Questions and Answers in 2024</li> <li>SQL Interview Questions</li> </ul>"},{"location":"cs/oa_prep/","title":"OA Prep","text":"<p>OA(online assessment) is often the first step in a quant dev/quant research job application. Be it automatically sent or human emailed, you usually need to spare 1 or 2 hours for this timed test. While many tech firms have same setup, OA in quant space has some unique characteristics, which I'll discuss below.</p>"},{"location":"cs/oa_prep/#big-picture-whats-the-purpose-of-oa","title":"Big picture: what's the purpose of OA?","text":"<p>In short, OA is purely for shrinking the candidate pool size. Due to the highly competitive market, for any open position, there will be flood of applications in a very short period of time. Even after some hard filtering like year of experience or education background, the number of candidate is still too large for next step. That's when OA comes in handy. With OA, you get to further shrink the candidate pool size. With scores at hand, employer can be flexible enough to select candidates for next step. It just sorts the score and selects top K, with K being a parameter to tune based on many factors.</p> <p>Realizing the purpose of OA is essential when preparing for it. You don't control the K, so you actually have no guarantee to be selected in that K member group, no matter how well you've done. Therefore, if you fail an OA, it doesn't mean you did a poor job. There is no need to blame youself for not passing an OA, simply because the K might be 1.</p>"},{"location":"cs/oa_prep/#what-to-prepare-for-oa","title":"What to prepare for OA?","text":"<p>Many would simply say, algorithms and data structures. Yes, that's correct, but that's also too broad/vague. What specific algorithms and data structures are the favorites? We need a prioritized list.</p> <p>Based on my personal experience and what I've observed, here are some highly preferred topics for a quant OA.</p> <ul> <li>array and string</li> <li>dfs/bfs</li> <li>two dimensional array/matrix</li> <li>graph</li> </ul> <p>It may surprise some people that tree is not among the list. That's because tree requires more contexts, and someone without a CS background might not even understand the problem. Employer wants to avoid such scenario that one problem basically asks \"have you studied certain type of data structure/algorithm?\". Such binary filter can be later applied in phone interviews. For OA, they still want to give everyone an equal opportunity. That's why linked list is also not an ideal option for OA problems.</p> <p>Array and string questions instead are very intuitive. They can still be extremely difficult to solve, but you get to choose how difficult it needs to be. It requires barely no context so everyone should be able to at least think about some brute force solutions. Usually there can be many solutions, so when it comes to comparing two candidates with same score, employer can still have some leverage on who had a better solution.</p> <p>Many techniques can also be applied to array and string questions. To name a few, dynamic programming, sliding window, two pointers, greedy. Even graph can be expressed in an array/list. dfs and bfs is too useful to be avoided in an OA question.</p>"},{"location":"cs/oa_prep/#detail-breakdown-short-list-of-topics-and-example-questions","title":"Detail breakdown: short list of topics and example questions","text":""},{"location":"cs/oa_prep/#if-you-have-to-pick-only-one-question","title":"If you have to pick only one question...","text":"<ul> <li>Best Time to Buy and Sell Stock</li> </ul> <p>All time favorite, I've encountered it over and over again in the interview. This is the starting point of a whole series of DP problems with same setup, yet you can write so many solutions, with minimum LOC of 5. So elegant that I have to paste the solution here. <pre><code>def maxProfit(self, prices: List[int]) -&gt; int:\n    min_price, max_profit = prices[0], 0\n    for i in range(len(prices)):\n        min_price = min(min_price, prices[i])\n        max_profit = max(max_profit, prices[i] - min_price)\n    return max_profit\n</code></pre></p>"},{"location":"cs/sorting/","title":"Sorting","text":"<p>This page shows frequently used sorting algorithms, implemented in Python, with notes on time complexity.</p>"},{"location":"cs/sorting/#bubble-sort","title":"Bubble Sort","text":"<p>Time complexity: \\(O(N^2)\\) <pre><code>def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(n - i - 1):\n            if arr[j] &gt; arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n</code></pre></p>"},{"location":"cs/sorting/#insertion-sort","title":"Insertion Sort","text":"<p>Time complexity: \\(O(N^2)\\) <pre><code>def insertion_sort(arr):\n    n = len(arr)\n    # start with second element (if exists)\n    for i in range(1, n):\n        key = arr[i]\n        j = i - 1\n        while j &gt;= 0 and arr[j] &gt; key:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n</code></pre></p>"},{"location":"cs/sorting/#selection-sort","title":"Selection Sort","text":"<p>Time complexity: \\(O(N^2)\\) <pre><code>def selection_sort(arr):\n    n = len(arr)\n    for i in range(n - 1):\n        min_idx = i\n        for j in range(i + 1, n):\n            if arr[j] &lt; arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n</code></pre></p>"},{"location":"cs/sorting/#quick-sort","title":"Quick Sort","text":"<ul> <li>Average time complexity: \\(O(Nlog(N))\\)</li> <li>Worst case time comlexity: \\(O(N^2)\\)</li> <li>not stable</li> </ul> <pre><code>def quick_sort(arr, low, high):\n    if len(arr) == 1:\n        return arr\n    if low &lt; high:\n        pivot = partition(arr, low, high)\n        quick_sort(arr, low, pivot - 1)\n        quick_sort(arr, pivot + 1, high)\n\ndef partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] &lt;= pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n    arr[i + 1], arr[high] = arr[high], arr[i + 1]\n    return i + 1\n</code></pre>"},{"location":"cs/sorting/#merge-sort","title":"Merge Sort","text":"<ul> <li>Average time complexity: \\(O(Nlog(N))\\)</li> <li>stable</li> </ul> <pre><code>def merge_sort(arr):\n    n = len(arr)\n    if n &gt; 1:\n        mid = n // 2\n        left = arr[:mid]\n        right = arr[mid:]\n\n        merge_sort(left)\n        merge_sort(right)\n\n        i = j = k = 0\n        while i &lt; len(left) and j &lt; len(right):\n            if left[i] &lt; right[j]:\n                arr[k] = left[i]\n                i + 1\n            else:\n                arr[k] = right[j]\n                j +=1\n            k += 1\n        while i &lt; len(left):\n            arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j &lt; len(right):\n            arr[k] = arr[j]\n            j += 1\n            k += 1\n</code></pre>"},{"location":"cs/sorting/#heap-sort","title":"Heap Sort","text":"<ul> <li>Average time complexity: \\(O(Nlog(N))\\)</li> </ul> <pre><code>def heap_sort(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, - 1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\ndef heapify(arr, n, i):\n    # create a max heap\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left &lt; n and arr[largest] &lt; arr[left]:\n        largest = left\n    if right &lt; n and arr[largest] &lt; arr[right]:\n        largest = right\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n</code></pre>"},{"location":"finance/cfa/","title":"CFA","text":"<p>This page summarizes important topics included in CFA program. Some caveats: - not all topics are included, only ones that I find useful/important to know - topics are based on my learning materials throughout years, which may not be up to date</p> <p>To find latest curriculum, see offical website.</p>"},{"location":"finance/cfa/#quantitative-methods","title":"Quantitative Methods","text":""},{"location":"finance/cfa/#economics","title":"Economics","text":""},{"location":"finance/cfa/#financial-statement-analysis","title":"Financial Statement Analysis","text":""},{"location":"finance/cfa/#corporate-finance","title":"Corporate Finance","text":""},{"location":"finance/cfa/#equity-investments","title":"Equity Investments","text":""},{"location":"finance/cfa/#fixed-income","title":"Fixed Income","text":""},{"location":"finance/cfa/#derivatives","title":"Derivatives","text":""},{"location":"finance/cfa/#alternative-investments","title":"Alternative Investments","text":""},{"location":"finance/cfa/#portfolio-management","title":"Portfolio Management","text":""}]}